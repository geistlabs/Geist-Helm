# You are editing:
# PRODUCTION
namespace: production

# Router Service (router.geist.im)
router:
  name: geist-router
  replicas: 2
  image:
    repository: alo42/router
    pullPolicy: Always
    tag: production-latest
  service:
    name: geist-router
    port: 8000
  env:
    NODE_ENV: production
    PORT: 8000
    API_URL: https://router.geist.im
    INFERENCE_URL: https://inference.geist.im
    EMBEDDINGS_URL: https://embeddings.geist.im
    MCP_BRAVE_URL: http://mcp-brave:8000
    ENABLE_TOOL_CALLS: "false"

  # Whisper STT service URL (external service)
  whisperServiceUrl: http://whisper-stt-service:8000

# Inference Service (inference.geist.im)
inference:
  name: geist-inference
  replicas: 2
  image:
    repository: alo42/inference
    pullPolicy: Always
    tag: production-latest
  service:
    name: geist-inference
    port: 8001
  env:
    NODE_ENV: production
    PORT: 8001
    API_URL: https://router.geist.im
    INFERENCE_URL: https://inference.geist.im
    EMBEDDINGS_URL: https://embeddings.geist.im

# Memory Service (memory.geist.im)
memory:
  name: geist-memory
  replicas: 2
  image:
    repository: alo42/memory
    pullPolicy: Always
    tag: production-latest
  service:
    name: geist-memory
    port: 8003
  env:
    NODE_ENV: production
    PORT: 8003
    API_URL: https://router.geist.im
    INFERENCE_URL: https://inference.geist.im
    EMBEDDINGS_URL: https://embeddings.geist.im

# Whisper STT Service (whisper-stt.geist.im)
whisper:
  name: geist-whisper-stt
  replicas: 2
  image:
    repository: alo42/whisper-stt
    pullPolicy: Always
    tag: production-latest
  service:
    name: whisper-stt-service
    port: 8000
  env:
    NODE_ENV: production
    PORT: 8000
    WHISPER_BINARY_PATH: /usr/local/bin/whisper-cli
    WHISPER_MODEL_PATH: /models/ggml-base.bin
  models:
    hostPath: /root/whisper-models
  ingress:
    name: whisper-stt-ingress
    host: whisper-stt.geist.im
    secretName: whisper-stt-tls

# Embeddings Service (embeddings.geist.im)
embeddings:
  name: geist-embeddings
  replicas: 2
  image:
    repository: alo42/embeddings
    pullPolicy: Always
    tag: production-latest
  service:
    name: geist-embeddings
    port: 8002
  env:
    NODE_ENV: production
    PORT: 8002
    API_URL: https://router.geist.im
    INFERENCE_URL: https://inference.geist.im
    EMBEDDINGS_URL: https://embeddings.geist.im

# Webapp Service (webapp.geist.im)
webapp:
  name: geist-webapp
  replicas: 2
  image:
    repository: alo42/webapp
    pullPolicy: Always
    tag: production-latest
  service:
    name: geist-webapp
    port: 3000
  env:
    NODE_ENV: production
    PORT: 3000
    API_URL: https://router.geist.im
    INFERENCE_URL: https://inference.geist.im
    EMBEDDINGS_URL: https://embeddings.geist.im

# MCP Brave Service (mcp-brave.geist.im)
mcpBrave:
  name: mcp-brave
  replicas: 2
  image:
    repository: alo42/mcp-brave
    pullPolicy: Always
    tag: production-latest
  service:
    name: mcp-brave
    port: 8000
  env:
    BRAVE_MCP_TRANSPORT: http

# MCP Fetch Service (mcp-fetch.geist.im)
mcpFetch:
  name: mcp-fetch
  replicas: 2
  image:
    repository: mcp/fetch
    pullPolicy: Always
    tag: latest
  service:
    name: mcp-fetch
    port: 8000

# Ingress Configuration
ingress:
  ingressClassName: nginx
  name: geist-production
  router:
    name: geist-router-ingress
    host: router.geist.im
  inference:
    name: geist-inference-ingress
    host: inference.geist.im
  memory:
    name: geist-memory-ingress
    host: memory.geist.im
  embeddings:
    name: geist-embeddings-ingress
    host: embeddings.geist.im
  webapp:
    name: geist-webapp-ingress
    host: webapp.geist.im
  mcpBrave:
    name: mcp-brave-ingress
    host: mcp-brave.geist.im
  mcpFetch:
    name: mcp-fetch-ingress
    host: mcp-fetch.geist.im
